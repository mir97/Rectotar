// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using Rectotarat.Models;
using System;

namespace Rectotarat.Migrations
{
    [DbContext(typeof(RectoratContext))]
    partial class RectoratContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Rectotarat.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IndicatorId");

                    b.Property<float>("IndicatorValue");

                    b.Property<float>("Position");

                    b.Property<int>("UnivercityId");

                    b.Property<int>("Year");

                    b.HasKey("AchievementId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("UnivercityId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Rectotarat.Models.Chairperson", b =>
                {
                    b.Property<int>("ChairpersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RectorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("StopDate");

                    b.HasKey("ChairpersonId");

                    b.HasIndex("RectorId");

                    b.ToTable("Chairpersons");
                });

            modelBuilder.Entity("Rectotarat.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChairpersonId");

                    b.Property<string>("DocumentDescription");

                    b.Property<string>("DocumentName");

                    b.Property<string>("DocumentURL");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("RegistrationNumber");

                    b.HasKey("DocumentId");

                    b.HasIndex("ChairpersonId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Rectotarat.Models.Indicator", b =>
                {
                    b.Property<int>("IndicatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IndicatorDescription");

                    b.Property<byte>("IndicatorId1");

                    b.Property<byte?>("IndicatorId2");

                    b.Property<byte?>("IndicatorId3");

                    b.Property<string>("IndicatorName");

                    b.Property<int>("IndicatorType");

                    b.Property<string>("IndicatorUnit");

                    b.Property<int>("Year");

                    b.HasKey("IndicatorId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("Rectotarat.Models.News", b =>
                {
                    b.Property<int>("Newsid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Header");

                    b.Property<string>("Message");

                    b.Property<DateTime>("PublicDate");

                    b.Property<int>("UnivercityId");

                    b.HasKey("Newsid");

                    b.HasIndex("UnivercityId");

                    b.ToTable("Newss");
                });

            modelBuilder.Entity("Rectotarat.Models.Raschet", b =>
                {
                    b.Property<int>("Raschetid")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Position");

                    b.Property<float>("SumaValue");

                    b.Property<int>("UnivercityId");

                    b.Property<int>("Year");

                    b.HasKey("Raschetid");

                    b.HasIndex("UnivercityId");

                    b.ToTable("Raschets");
                });

            modelBuilder.Entity("Rectotarat.Models.Rector", b =>
                {
                    b.Property<int>("RectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Photo");

                    b.Property<int>("UniversityId");

                    b.HasKey("RectorId");

                    b.HasIndex("UniversityId")
                        .IsUnique();

                    b.ToTable("Rectors");
                });

            modelBuilder.Entity("Rectotarat.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Logo");

                    b.Property<string>("UniversityName");

                    b.Property<string>("Website");

                    b.HasKey("UniversityId");

                    b.ToTable("Universitys");
                });

            modelBuilder.Entity("Rectotarat.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("RoleName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UniversityId");

                    b.Property<string>("UniversityName");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Rectotarat.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Rectotarat.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rectotarat.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Rectotarat.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.Achievement", b =>
                {
                    b.HasOne("Rectotarat.Models.Indicator", "Indicator")
                        .WithMany("Achievements")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rectotarat.Models.University", "Univercity")
                        .WithMany("Achievements")
                        .HasForeignKey("UnivercityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.Chairperson", b =>
                {
                    b.HasOne("Rectotarat.Models.Rector", "Rector")
                        .WithMany()
                        .HasForeignKey("RectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.Document", b =>
                {
                    b.HasOne("Rectotarat.Models.Chairperson", "Chairperson")
                        .WithMany("Documents")
                        .HasForeignKey("ChairpersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.News", b =>
                {
                    b.HasOne("Rectotarat.Models.University", "Univercity")
                        .WithMany("Newss")
                        .HasForeignKey("UnivercityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.Raschet", b =>
                {
                    b.HasOne("Rectotarat.Models.University", "Univercity")
                        .WithMany()
                        .HasForeignKey("UnivercityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Rectotarat.Models.Rector", b =>
                {
                    b.HasOne("Rectotarat.Models.University", "University")
                        .WithOne("Rector")
                        .HasForeignKey("Rectotarat.Models.Rector", "UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
